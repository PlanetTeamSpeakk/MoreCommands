plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

def root = project.rootProject
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig root.subprojects.collect {
            it.sourceSets.main.output.resourcesDir.list()
                    .findAll { it.endsWith(".mixins.json") } }
                .flatten()
                .unique()
                .toArray(new String[0])
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.officialMojangMappings()

    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modImplementation "com.ptsmods:devlogin:3.1"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
    common(project(path: ":common:API", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common:API", configuration: "transformProductionForge")) { transitive false }

    project(":common:Compat").subprojects.collect { if (it.parent != project(":common:Compat")) return null
        common(project(path: ":common:Compat:" + it.name, configuration: "namedElements")) { transitive false } }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    destinationDirectory.set file(destinationDirectory.get().asFile.toPath().resolve("../devlibs"))
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

task shadowCompat(type: Jar) {
    archiveFileName = "${archivesBaseName}-${archiveVersion.get()}_${rootProject.minecraft_version_least_forge}-${rootProject.minecraft_version}_FORGE.${archiveExtension.get()}"
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest.from jar.manifest
    from zipTree(remapJar.archiveFile)
    from { project(":common:Compat").subprojects.collect { if (it.getChildProjects().containsKey("forge"))
        zipTree(it.getChildProjects().get("forge").remapJar.archiveFile) else null } }
}

tasks.build.dependsOn(shadowCompat)

remapJar {
    destinationDirectory.set file(destinationDirectory.get().asFile.toPath().resolve("../devlibs"))
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "dev-shadow-remap"
}

jar {
    destinationDirectory.set file(destinationDirectory.get().asFile.toPath().resolve("../devlibs"))
    classifier "dev"
}

sourcesJar {
    def sources = project(":common").subprojects.collect { it.sourcesJar }
    sources.add project(":common").sourcesJar
    dependsOn sources

    from { sources.collect { zipTree(it.archiveFile) } }
}

repositories {
    mavenCentral()
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
